name: Terraform CI/CD (no backend file)

on:
  pull_request:
    branches: [ main ]
    paths: [ 'generated_modules/**' ]
  push:
    branches: [ main ]
    paths: [ 'generated_modules/**' ]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_BACKEND_BUCKET: ${{ vars.TF_BACKEND_BUCKET }}
  TF_BACKEND_DDB_TABLE: ${{ vars.TF_BACKEND_DDB_TABLE }}

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.find.outputs.modules }}
      has_modules: ${{ steps.find.outputs.has_modules }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: find
        name: Find changed module folders
        shell: bash
        run: |
          set -euo pipefail

          # Determine diff range
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            DIFF_RANGE="$BASE_SHA...$HEAD_SHA"
          else
            BEFORE="${{ github.event.before }}"
            AFTER="${{ github.sha }}"
            if [ -z "$BEFORE" ]; then
              DIFF_RANGE="$AFTER~1...$AFTER"
            else
              DIFF_RANGE="$BEFORE...$AFTER"
            fi
          fi

          echo "Diff range: $DIFF_RANGE"

          # Find unique top-level module dirs under generated_modules/
          mapfile -t changed < <(git diff --name-only "$DIFF_RANGE" \
            | awk -F/ '/^generated_modules\//{print $1"/"$2}' | sort -u)

          # If none detected (e.g., first merge), comment this fallback in/out as you like:
          # if [ ${#changed[@]} -eq 0 ]; then
          #   mapfile -t changed < <(find generated_modules -mindepth 1 -maxdepth 1 -type d | sort -u)
          # fi

          if [ ${#changed[@]} -eq 0 ]; then
            echo "No changed module dirs detected."
            echo "modules=[]" >> "$GITHUB_OUTPUT"
            echo "has_modules=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Build single-line JSON array
          json="["
          sep=""
          for d in "${changed[@]}"; do
            echo " - $d"
            json="${json}${sep}\"$d\""
            sep=","
          done
          json="${json}]"

          echo "modules=${json}" >> "$GITHUB_OUTPUT"
          echo "has_modules=true" >> "$GITHUB_OUTPUT"

  plan:
    if: github.event_name == 'pull_request' && needs.discover.outputs.has_modules == 'true'
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tfdir: ${{ fromJson(needs.discover.outputs.modules) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Export AWS creds (POC)
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init (S3 backend, no file)
        working-directory: ${{ matrix.tfdir }}
        run: |
          KEY="${{ matrix.tfdir }}/terraform.tfstate"
          terraform init -input=false \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DDB_TABLE}" \
            -backend-config="encrypt=true"

      - name: Terraform Fmt & Validate
        working-directory: ${{ matrix.tfdir }}
        run: |
          terraform fmt -check
          terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ matrix.tfdir }}
        run: |
          if [ -f dev.tfvars ]; then
            terraform plan -input=false -no-color -var-file=dev.tfvars -out=tfplan
          else
            terraform plan -input=false -no-color -out=tfplan
          fi

      - name: Comment plan on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('node:child_process');
            const dir = '${{ matrix.tfdir }}';
            let out = '';
            try { out = execSync('terraform show -no-color tfplan', { cwd: dir }).toString(); }
            catch { out = 'Failed to render plan.'; }
            const body = `### Terraform Plan (${dir})\n\`\`\`\n${out.substring(0,60000)}\n\`\`\``;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

  apply:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.discover.outputs.has_modules == 'true'
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tfdir: ${{ fromJson(needs.discover.outputs.modules) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Export AWS creds (POC)
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init (S3 backend, no file)
        working-directory: ${{ matrix.tfdir }}
        run: |
          KEY="${{ matrix.tfdir }}/terraform.tfstate"
          terraform init -input=false \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DDB_TABLE}" \
            -backend-config="encrypt=true"

      - name: Terraform Apply
        working-directory: ${{ matrix.tfdir }}
        run: |
          if [ -f dev.tfvars ]; then
            terraform apply -input=false -auto-approve -var-file=dev.tfvars
          else
            terraform apply -input=false -auto-approve
          fi
